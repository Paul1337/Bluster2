class MapManager {


  constructor() {
  }

  generateStartMap() {
    let ranMap = Math.floor(Math.random() * 3);

    switch (ranMap) {
      case 0:
        this.map = [
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 20, 0, 0, 0, 0, 0, 50, 50, 50, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 60, 0],
          [0, 0, 38, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0],
          [0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 32, 19, 40, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 15, 20, 20, 0, 64, 0, 0, 0, 0, 0, 0, 0],
          [0, 55, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 16, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ];
        break;
      case 1:
        this.map = [
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 20, 0, 40, 0, 0, 0, 0, 0, 80, 80, 0, 0, 0, 0, 0, 0, 80, 0, 0],
          [20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [20, 0, 0, 0, 0, 35, 0, 0, 0, 32, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 21, 0, 70, 0, 0, 9, 9, 0, 0, 0, 25, 25, 0, 0, 0, 0, 0, 0],
          [0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0],
          [0, 0, 15, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 7, 7, 0, 7, 7],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ];
        break;
      case 2:
        this.map = [
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 45, 35, 0, 0, 0],
          [0, 0, 0, 60, 5, 5, 0, 10, 10, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 45, 45, 5, 0, 0, 0, 0, 0, 0, 0, 0, 45, 45, 35, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 64, 64, 0, 0, 0, 0, 22, 0, 0],
          [0, 0, 25, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0],
          [0, 0, 20, 0, 9, 0, 0, 0, 15, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 15, 0, 0, 9, 0, 0, 0, 30, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ];
        break;
    }

    this.mapGenerated(this.map);
  }

  initMapParams() {
    this.destroyedBricks = 0;
    this.maxMapNum = 80;
    this.minMapNum = 0;
    this.brickFrequency = 0.85;
    this.minMapNumDefined(this.minMapNum);
    this.maxMapNumDefined(this.maxMapNum);
  }

  updateDifficulty(level) {
    if (level > 0 && level < 12) {
      this.brickFrequency = 0.85;
      this.maxMapNum = 80;
      this.minMapNum = 0;
    } else if (level > 11 && level < 18) {
      this.brickFrequency = 0.8;
      this.maxMapNum = 90;
      this.minMapNum = 10;
    } else if (level > 17 && level < 25) {
      this.brickFrequency = 0.75;
      this.maxMapNum = 100;
      this.minMapNum = 20;
    } else if (level > 24 && level < 40) {
      this.brickFrequency = 0.65;
      this.maxMapNum = 110;
      this.minMapNum = 30;
    } else if (level > 39 && level < 70) {
      this.brickFrequency = 0.55;
      this.maxMapNum = 125;
      this.minMapNum = 45;
    } else if (level > 69) {
      this.brickFrequency = 0.4;
      this.maxMapNum = 155;
      this.minMapNum = 65;
    }

    this.minMapNumDefined(this.minMapNum);
    this.maxMapNumDefined(this.maxMapNum);
  }

  createNewUpperBricks(level) {
    for (let x = 0; x < this.map[2].length; x ++) {
      if (Math.random() > this.brickFrequency) {
        this.map[2][x] = Math.floor(Math.random() * (this.maxMapNum + 1 - this.minMapNum)) + this.minMapNum;
      }
    }
  }

  notLost() {

    let lastRow = this.map.length - 2;
    for (let j = 0; j < this.map[lastRow].length; j ++) {
      if (this.map[lastRow][j] > 0)
        return false;
    }

    return true;
  }

  moveMapDown() {
    for (let i = this.map.length - 2; i >= 0; i --) {
      for (let j = 0; j < this.map[i].length; j ++) {
        this.map[i + 1][j] = this.map[i][j];
      }
    }
  }

  damageOn(i, j) {
    this.map[i][j] --;
    if (this.map[i][j] == 0) {
      this.destroyedBricks ++;
    }
  }


}
